import random
import pandas as pd

tumor_size_options = ["<1 cm", "1-3 cm", "≥3 cm"]
tumor_ct_options = ["<10 HU", "≥10 HU"]
tumor_laterality_options = ["Unilateral", "Bilateral"]
patient_age_options = ["<18 years", "18-60 years", "≥60 years"]

data = []

for i in range(210):
    # randomly generate values for each variable
    tumor_size = random.choice(tumor_size_options)
    tumor_ct = random.choice(tumor_ct_options + [None])
    tumor_laterality = random.choice(tumor_laterality_options + [None])
    patient_age = random.choice(patient_age_options)

    data.append([tumor_size, tumor_ct, tumor_laterality, patient_age])


df = pd.DataFrame(data, columns=["Tumor Size", "Benign Imaging", "Tumor Laterality", "Patient Age"])
df.to_csv("task2_TumorInfoPatientAge.csv", index=False)

import pandas as pd

df = pd.read_csv('/Users/ekeulseuji-/Downloads/task2_TumorInfoPatientAge.csv')

# keep only the rows with (strictly) non-missing values
df = df.dropna(subset=['Patient Age', 'Tumor Size', 'Benign Imaging', 'Tumor Laterality'])


df

# follow the hard criteria and get the risk group for each patient
riskGroupsAssigned = df.apply(lambda row: RiskGroupBasicClassifier(row['Patient Age'], row['Tumor Size'], row['Benign Imaging'], row['Tumor Laterality']), axis=1)

# add the resulting series as a new column to the dataframe
df['Risk Group'] = riskGroupsAssigned

df


# first convert the categorical values into numerical values
df['Tumor Size'] = df['Tumor Size'].replace({'<1 cm':0, '1-3 cm':1, '≥3 cm':2})
df['Benign Imaging'] = df['Benign Imaging'].replace({'<10 HU':0, '≥10 HU':1})
df['Tumor Laterality'] = df['Tumor Laterality'].replace({'Unilateral':0, 'Bilateral':1})
df['Patient Age'] = df['Patient Age'].replace({'<18 years':0, '18-60 years':1, '≥60 years':2})
df['Risk Group'] = df['Risk Group'].replace({'Low Risk':0, 'Medium Risk':1, 'High Risk':2})

df

from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, f1_score, roc_auc_score

X_train, X_test, y_train, y_test = train_test_split(df.drop('Risk Group', axis=1), df['Risk Group'], test_size=0.3)

task2dt = DecisionTreeClassifier()
task2dt.fit(X_train, y_train)
y_pred = task2dt.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred, average='weighted')
auc = roc_auc_score(y_test, task2dt.predict_proba(X_test), multi_class='ovr')

print(f"Accuracy: {accuracy}")
print(f"F1-score: {f1}")
print(f"AUC: {auc}")

from sklearn.tree import export_graphviz
from IPython.display import Image
import pydotplus

dot_data = export_graphviz(task2dt, out_file=None, 
                           feature_names=X_train.columns,
                           class_names=['0', '1', '2'],
                           filled=True, rounded=True,  
                           special_characters=True)
graph = pydotplus.graph_from_dot_data(dot_data)  
Image(graph.create_png())
